# üöÄ Development Execution Prompt - Ultimate Type Safety Template

## Mission

Analyze progress and execute the next optimal development task with complete implementation using a comprehensive 12-agent system for ultimate type safety and quality.

**Note**: This prompt is executed by the `/dev` command after requirement.md, design.md, and tasks/ have been created.

## EXECUTION SEQUENCE (MANDATORY)

### Step 0: Overall Progress Check (NEW - MANDATORY)

```txt
# Check overall progress summary
Read @progress/SUMMARY.md

# Check for any interrupted work
Read @progress/IN_PROGRESS.md
```

_Understand current project state and any incomplete work before proceeding_

### Step 1: Progress Analysis and Task Selection

```txt
Use Task tool with subagent_type: "tracker"
Prompt: "analyze"  # Returns current status and optimal next task
```

_Get current status and task recommendations - tracker will return the selected task ID_

### Step 2: Implementation Guidance (if needed)

```txt
Use Task tool with subagent_type: "guide"
Prompt: "[specific implementation question]"
```

### Step 3: Test-Driven Development with Quality Gates

```txt
Use Task tool with subagent_type: "test"
Prompt: "red" # Create failing tests

Use Task tool with subagent_type: "test"
Prompt: "green" # Implement minimal code

# CRITICAL: Quality check after implementation
Use Task tool with subagent_type: "qa"
Prompt: "quick" # Run eslint & tsc to fix errors immediately

Use Task tool with subagent_type: "test"
Prompt: "blue" # Refactor with safety

# Final quality check after refactoring
Use Task tool with subagent_type: "qa"
Prompt: "quick" # Ensure refactoring didn't introduce errors
```

_Follow TDD cycle with quality gates for all implementations_

### Step 4: Implementation with Quality Checks

- Follow selected task requirements
- Use specialized agents during implementation:
  - `architect` - Clean Architecture compliance
  - `typesafe` - Ultimate Type Safety (8-level)
  - `monorepo` - Workspace dependencies
- Update progress file YAML frontmatter continuously

### Step 5: Comprehensive Quality Verification

```txt
Use Task tool with subagent_type: "security"  # Security vulnerability check
Use Task tool with subagent_type: "review"    # Code quality and SOLID principles
Use Task tool with subagent_type: "qa"        # Final quality gate
```

_Ensure zero defects before completion_

### Step 6: Task Completion and Progress Update

```txt
# Mark task as completed and update progress
Use Task tool with subagent_type: "tracker"
Prompt: "complete XX-YY"  # Replace XX-YY with actual task ID

# Update overall project summary
Use Task tool with subagent_type: "tracker"
Prompt: "summary"
```

## SubAgent Usage Matrix (12 Agents Total)

**MANDATORY AGENTS** (Must use):

- `tracker` - FIRST step (progress analysis) & LAST step (update progress)
- `test` - TDD cycle for all new code
- `qa` - Final quality gate before completion

**QUALITY AGENTS** (Use for thorough checks):

- `architect` - Clean Architecture compliance validation
- `typesafe` - Ultimate Type Safety enforcement (8-level system)
- `security` - OWASP Top 10 and vulnerability detection
- `review` - SOLID principles and code quality

**SPECIALIZED AGENTS** (Use when applicable):

- `guide` - Implementation guidance from @docs/impl/ directory
- `monorepo` - Workspace dependency management
- `perf` - Performance optimization (Core Web Vitals)
- `docker` - Container environment optimization
- `debug` - Systematic debugging support

**Note**: Invoke these agents using the Task tool with the appropriate `subagent_type`, not as slash commands.

## Success Criteria

- ‚úÖ All acceptance criteria met
- ‚úÖ Zero ESLint errors (checked after each TDD phase)
- ‚úÖ Zero TypeScript errors (checked after each TDD phase)
- ‚úÖ Build success
- ‚úÖ Progress file updated with YAML frontmatter
- ‚úÖ Technical decisions documented

**CRITICAL**: ESLint and TypeScript errors must be resolved immediately after each implementation phase (GREEN) and refactoring phase (BLUE) using `qa quick` to prevent error accumulation.

## Required YAML Frontmatter (CRITICAL for tracking)

```yaml
---
task_id: 'XX-YY'
task_name: 'descriptive-name'
task_status: 'completed'
developer: 'developer-name'
start_date: 'YYYY-MM-DD'
end_date: 'YYYY-MM-DD'
estimated_hours: X
actual_hours: X.X
blocks_tasks: ['XX-YY', 'XX-YY'] # tasks waiting for this completion
depends_on_completed: ['XX-YY'] # prerequisite tasks
technical_decisions:
  key_choice: 'chosen-option'
  pattern: 'implementation-approach'
files_modified:
  - path: 'path/to/file'
    action: 'created|modified|deleted'
    purpose: 'what this file does'
quality_metrics:
  eslint_errors: 0
  typescript_errors: 0
  build_success: true
acceptance_criteria_met: 'X/Y'
---
```

## Expected Output Format

```md
## üìä Progress Analysis
- Completed: [X] tasks, Ready: [Y] tasks, Blocked: [Z] tasks

## üéØ Selected Task: XX-YY [Task Name]
**Rationale**: [Why chosen] **Unblocks**: [List] **Estimated**: [X hours]

## üöÄ Implementation
[Complete implementation with code, configs, etc.]

## ‚úÖ Verification Results
- ESLint: [‚úÖ/‚ùå], TypeScript: [‚úÖ/‚ùå], Acceptance Criteria: [X/Y] met

## üîÑ Next Recommendation
**Newly Available**: [Tasks unblocked] **Suggested Next**: [Optimal follow-up]
```

## Fallback Strategy (if SubAgents unavailable)

- **Progress Analysis**: Read @progress/ directory YAML frontmatter manually
- **Task Selection**: Read @tasks/ directory and use critical path (most blocks_tasks) + dependency satisfaction
- **TDD Implementation**: Create tests manually following RED-GREEN-BLUE cycle
- **Architecture Check**: Verify Clean Architecture layers and SOLID principles manually
- **Type Safety**: Run `npx tsc --noEmit` and check for any type errors
- **Security Check**: Run `npm audit` and review authentication/data handling code
- **Code Review**: Check complexity, naming conventions, and design patterns
- **Quality Verification**: `npm run lint && npx tsc --noEmit && npm test && npm run build`

---

## üéØ IMMEDIATE ACTION

**Claude Code**: Execute this development cycle:

### Task Start (Steps 0-2)

0. Read @progress/SUMMARY.md and @progress/IN_PROGRESS.md - Check project state
1. Use Task tool with `tracker` prompt: "analyze" - Get task selection and recommendations
2. Use Task tool with `tracker` prompt: "start XX-YY" - Mark selected task as started

### Task Implementation (Steps 3-5)

3. Use Task tool with `guide` (if needed) - Get implementation guidance
4. Use Task tool with `test` (red ‚Üí green ‚Üí blue) with `qa quick` after each phase
5. Use specialized agents as needed (`architect`, `typesafe`, `monorepo`)

### Task Completion (Steps 6-7)

6. Use Task tool with `security` ‚Üí `review` ‚Üí `qa` - Quality verification
7. Execute task completion sequence:
   - Use Task tool with `tracker` prompt: "complete XX-YY"
   - Use Task tool with `tracker` prompt: "summary"

**BEGIN EXECUTION NOW**
