services:
  # PostgreSQL Database
  postgres:
    image: postgres:17.6
    container_name: postgres
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - ./local-data/postgres:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  frontend:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.frontend
    container_name: frontend
    ports:
      - "5173:5173"
    volumes:
      - ../:/workspace
      - /workspace/apps/frontend/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3000
      - VITE_APP_VERSION=0.0.0
      - VITE_ENVIRONMENT=development
      - VITE_ENABLE_DEBUG=true
      - VITE_API_TIMEOUT=120000
    networks:
      - app_network
    working_dir: /workspace/apps/frontend
    depends_on:
      - backend
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"

  backend:
    image: node:22
    container_name: backend
    ports:
      - "3000:3000"
      # Lambda Runtime Interface Emulator port for local testing
      - "9000:8080"
    volumes:
      - ../:/workspace
      - /workspace/apps/backend/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      - SERVER_TIMEOUT=120000
      # PostgreSQL settings
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/dev
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=dev
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_SSL=false
    networks:
      - app_network
    working_dir: /workspace/apps/backend
    depends_on:
      - postgres
    command: sh -c "npm install && npm run dev"

networks:
  app_network:
    driver: bridge

volumes:
  postgres-data:
